#%%
#Load all data 

import numpy as np
import matplotlib.pyplot as plt

activity = np.load('data/activity_helicopter.npy')
history = np.load('data/history_helicopter.npy')
states = np.load('data/states_helicopter.npy') #[s, s_hat, PE, context]
parameters = np.load('data/weights.npy')
print('data loaded')

states_flat = states.reshape(-1,4)


# %%
# Behavioural figures

#figure 2 - Nassar 2021
#relative error x = absolute prediction error magnitude
# y axis = learning rate rises with prediction error

# Extract prediction error (PE) and state (s) and predicted state (s_hat)
state = states_flat[:, 0]
predicted_state = states_flat[:, 1]
prediction_error = states_flat[:, 2]
action = history[:,1]

# Calculate the update from state at timestep t to predicted state at timestep t+1
update = predicted_state[1:] - action[:-1]

# Plot the figure
plt.figure(figsize=(10, 6))
plt.scatter(prediction_error[:-1], update, alpha=0.5, color='blue')
plt.xlabel('Prediction Error')
plt.ylabel('Update (Predicted State at t+1 - State at t)')
plt.title('Learning Rate Rises with Prediction Error')
plt.grid(True)
plt.show()

# Save the plot
plt.savefig('plots/learning_rate_vs_prediction_error.png')

# %%